/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace TSFeeDistributor_V4 {
  export type PendingDistributionStruct = {
    isActive: boolean;
    totalAmount: BigNumberish;
    treasuryAmount: BigNumberish;
    uThorAmount: BigNumberish;
    yThorAmount: BigNumberish;
    vThorAmount: BigNumberish;
    thorPoolAmount: BigNumberish;
    snapshotUThorBps: BigNumberish;
    snapshotYThorBps: BigNumberish;
    snapshotVThorBps: BigNumberish;
    snapshotThorPoolBps: BigNumberish;
  };

  export type PendingDistributionStructOutput = [
    isActive: boolean,
    totalAmount: bigint,
    treasuryAmount: bigint,
    uThorAmount: bigint,
    yThorAmount: bigint,
    vThorAmount: bigint,
    thorPoolAmount: bigint,
    snapshotUThorBps: bigint,
    snapshotYThorBps: bigint,
    snapshotVThorBps: bigint,
    snapshotThorPoolBps: bigint
  ] & {
    isActive: boolean;
    totalAmount: bigint;
    treasuryAmount: bigint;
    uThorAmount: bigint;
    yThorAmount: bigint;
    vThorAmount: bigint;
    thorPoolAmount: bigint;
    snapshotUThorBps: bigint;
    snapshotYThorBps: bigint;
    snapshotVThorBps: bigint;
    snapshotThorPoolBps: bigint;
  };
}

export interface TSFeeDistributor_V4Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelPendingDistribution"
      | "communityPreciseBps"
      | "distribute"
      | "emergencyRecoverToken"
      | "executors"
      | "feeAsset"
      | "getPendingDistribution"
      | "isReadyForDistribution"
      | "owners"
      | "pendingDistribution"
      | "setExecutor"
      | "setOwner"
      | "setShares"
      | "setTCRouter"
      | "setTreasuryWallet"
      | "swapToRune"
      | "tcRouter"
      | "thorPoolPreciseBps"
      | "thorToken"
      | "treasuryPreciseBps"
      | "treasuryWallet"
      | "uThorPreciseBps"
      | "uThorToken"
      | "vThorPreciseBps"
      | "vThorToken"
      | "yThorPreciseBps"
      | "yThorToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Distribution"
      | "ExecutorSet"
      | "OwnerSet"
      | "PendingDistributionCancelled"
      | "SwapToRuneInitiated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelPendingDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityPreciseBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRecoverToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "feeAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPendingDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyForDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owners", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "pendingDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutor",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTCRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToRune",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "tcRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "thorPoolPreciseBps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "thorToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryPreciseBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uThorPreciseBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uThorToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vThorPreciseBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vThorToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yThorPreciseBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yThorToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelPendingDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityPreciseBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRecoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReadyForDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTCRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapToRune", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tcRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "thorPoolPreciseBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "thorToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryPreciseBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uThorPreciseBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uThorToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vThorPreciseBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vThorToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "yThorPreciseBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yThorToken", data: BytesLike): Result;
}

export namespace DistributionEvent {
  export type InputTuple = [
    totalAmount: BigNumberish,
    treasuryAmount: BigNumberish,
    uThorAmount: BigNumberish,
    yThorAmount: BigNumberish,
    vThorAmount: BigNumberish,
    thorPoolAmount: BigNumberish
  ];
  export type OutputTuple = [
    totalAmount: bigint,
    treasuryAmount: bigint,
    uThorAmount: bigint,
    yThorAmount: bigint,
    vThorAmount: bigint,
    thorPoolAmount: bigint
  ];
  export interface OutputObject {
    totalAmount: bigint;
    treasuryAmount: bigint;
    uThorAmount: bigint;
    yThorAmount: bigint;
    vThorAmount: bigint;
    thorPoolAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutorSetEvent {
  export type InputTuple = [executor: AddressLike, active: boolean];
  export type OutputTuple = [executor: string, active: boolean];
  export interface OutputObject {
    executor: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerSetEvent {
  export type InputTuple = [owner: AddressLike, active: boolean];
  export type OutputTuple = [owner: string, active: boolean];
  export interface OutputObject {
    owner: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingDistributionCancelledEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapToRuneInitiatedEvent {
  export type InputTuple = [
    totalAmount: BigNumberish,
    runeSwapAmount: BigNumberish,
    thorSwapAmount: BigNumberish,
    uThorBps: BigNumberish,
    yThorBps: BigNumberish,
    vThorBps: BigNumberish,
    thorPoolBps: BigNumberish
  ];
  export type OutputTuple = [
    totalAmount: bigint,
    runeSwapAmount: bigint,
    thorSwapAmount: bigint,
    uThorBps: bigint,
    yThorBps: bigint,
    vThorBps: bigint,
    thorPoolBps: bigint
  ];
  export interface OutputObject {
    totalAmount: bigint;
    runeSwapAmount: bigint;
    thorSwapAmount: bigint;
    uThorBps: bigint;
    yThorBps: bigint;
    vThorBps: bigint;
    thorPoolBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TSFeeDistributor_V4 extends BaseContract {
  connect(runner?: ContractRunner | null): TSFeeDistributor_V4;
  waitForDeployment(): Promise<this>;

  interface: TSFeeDistributor_V4Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelPendingDistribution: TypedContractMethod<[], [void], "nonpayable">;

  communityPreciseBps: TypedContractMethod<[], [bigint], "view">;

  distribute: TypedContractMethod<[], [void], "nonpayable">;

  emergencyRecoverToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executors: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  feeAsset: TypedContractMethod<[], [string], "view">;

  getPendingDistribution: TypedContractMethod<
    [],
    [TSFeeDistributor_V4.PendingDistributionStructOutput],
    "view"
  >;

  isReadyForDistribution: TypedContractMethod<
    [],
    [[boolean, string] & { ready: boolean; reason: string }],
    "view"
  >;

  owners: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  pendingDistribution: TypedContractMethod<
    [],
    [
      [
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        isActive: boolean;
        totalAmount: bigint;
        treasuryAmount: bigint;
        uThorAmount: bigint;
        yThorAmount: bigint;
        vThorAmount: bigint;
        thorPoolAmount: bigint;
        snapshotUThorBps: bigint;
        snapshotYThorBps: bigint;
        snapshotVThorBps: bigint;
        snapshotThorPoolBps: bigint;
      }
    ],
    "view"
  >;

  setExecutor: TypedContractMethod<
    [owner: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<
    [owner: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  setShares: TypedContractMethod<
    [_treasuryPreciseBps: BigNumberish, _communityPreciseBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTCRouter: TypedContractMethod<
    [_tcRouterAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryWallet: TypedContractMethod<
    [_treasuryWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  swapToRune: TypedContractMethod<
    [inboundAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  tcRouter: TypedContractMethod<[], [string], "view">;

  thorPoolPreciseBps: TypedContractMethod<[], [bigint], "view">;

  thorToken: TypedContractMethod<[], [string], "view">;

  treasuryPreciseBps: TypedContractMethod<[], [bigint], "view">;

  treasuryWallet: TypedContractMethod<[], [string], "view">;

  uThorPreciseBps: TypedContractMethod<[], [bigint], "view">;

  uThorToken: TypedContractMethod<[], [string], "view">;

  vThorPreciseBps: TypedContractMethod<[], [bigint], "view">;

  vThorToken: TypedContractMethod<[], [string], "view">;

  yThorPreciseBps: TypedContractMethod<[], [bigint], "view">;

  yThorToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelPendingDistribution"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "communityPreciseBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distribute"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyRecoverToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executors"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "feeAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPendingDistribution"
  ): TypedContractMethod<
    [],
    [TSFeeDistributor_V4.PendingDistributionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isReadyForDistribution"
  ): TypedContractMethod<
    [],
    [[boolean, string] & { ready: boolean; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingDistribution"
  ): TypedContractMethod<
    [],
    [
      [
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        isActive: boolean;
        totalAmount: bigint;
        treasuryAmount: bigint;
        uThorAmount: bigint;
        yThorAmount: bigint;
        vThorAmount: bigint;
        thorPoolAmount: bigint;
        snapshotUThorBps: bigint;
        snapshotYThorBps: bigint;
        snapshotVThorBps: bigint;
        snapshotThorPoolBps: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setExecutor"
  ): TypedContractMethod<
    [owner: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<
    [owner: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setShares"
  ): TypedContractMethod<
    [_treasuryPreciseBps: BigNumberish, _communityPreciseBps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTCRouter"
  ): TypedContractMethod<[_tcRouterAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryWallet"
  ): TypedContractMethod<[_treasuryWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapToRune"
  ): TypedContractMethod<[inboundAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tcRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "thorPoolPreciseBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "thorToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "treasuryPreciseBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "treasuryWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uThorPreciseBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "uThorToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vThorPreciseBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vThorToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "yThorPreciseBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yThorToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Distribution"
  ): TypedContractEvent<
    DistributionEvent.InputTuple,
    DistributionEvent.OutputTuple,
    DistributionEvent.OutputObject
  >;
  getEvent(
    key: "ExecutorSet"
  ): TypedContractEvent<
    ExecutorSetEvent.InputTuple,
    ExecutorSetEvent.OutputTuple,
    ExecutorSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnerSet"
  ): TypedContractEvent<
    OwnerSetEvent.InputTuple,
    OwnerSetEvent.OutputTuple,
    OwnerSetEvent.OutputObject
  >;
  getEvent(
    key: "PendingDistributionCancelled"
  ): TypedContractEvent<
    PendingDistributionCancelledEvent.InputTuple,
    PendingDistributionCancelledEvent.OutputTuple,
    PendingDistributionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "SwapToRuneInitiated"
  ): TypedContractEvent<
    SwapToRuneInitiatedEvent.InputTuple,
    SwapToRuneInitiatedEvent.OutputTuple,
    SwapToRuneInitiatedEvent.OutputObject
  >;

  filters: {
    "Distribution(uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      DistributionEvent.InputTuple,
      DistributionEvent.OutputTuple,
      DistributionEvent.OutputObject
    >;
    Distribution: TypedContractEvent<
      DistributionEvent.InputTuple,
      DistributionEvent.OutputTuple,
      DistributionEvent.OutputObject
    >;

    "ExecutorSet(address,bool)": TypedContractEvent<
      ExecutorSetEvent.InputTuple,
      ExecutorSetEvent.OutputTuple,
      ExecutorSetEvent.OutputObject
    >;
    ExecutorSet: TypedContractEvent<
      ExecutorSetEvent.InputTuple,
      ExecutorSetEvent.OutputTuple,
      ExecutorSetEvent.OutputObject
    >;

    "OwnerSet(address,bool)": TypedContractEvent<
      OwnerSetEvent.InputTuple,
      OwnerSetEvent.OutputTuple,
      OwnerSetEvent.OutputObject
    >;
    OwnerSet: TypedContractEvent<
      OwnerSetEvent.InputTuple,
      OwnerSetEvent.OutputTuple,
      OwnerSetEvent.OutputObject
    >;

    "PendingDistributionCancelled(uint256)": TypedContractEvent<
      PendingDistributionCancelledEvent.InputTuple,
      PendingDistributionCancelledEvent.OutputTuple,
      PendingDistributionCancelledEvent.OutputObject
    >;
    PendingDistributionCancelled: TypedContractEvent<
      PendingDistributionCancelledEvent.InputTuple,
      PendingDistributionCancelledEvent.OutputTuple,
      PendingDistributionCancelledEvent.OutputObject
    >;

    "SwapToRuneInitiated(uint256,uint256,uint256,uint32,uint32,uint32,uint32)": TypedContractEvent<
      SwapToRuneInitiatedEvent.InputTuple,
      SwapToRuneInitiatedEvent.OutputTuple,
      SwapToRuneInitiatedEvent.OutputObject
    >;
    SwapToRuneInitiated: TypedContractEvent<
      SwapToRuneInitiatedEvent.InputTuple,
      SwapToRuneInitiatedEvent.OutputTuple,
      SwapToRuneInitiatedEvent.OutputObject
    >;
  };
}
