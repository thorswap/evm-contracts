/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "SKChainflipAggregator_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SKChainflipAggregator_V1__factory>;
    getContractFactory(
      name: "TSAggregator_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregator_V1__factory>;
    getContractFactory(
      name: "TSAggregator_V2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregator_V2__factory>;
    getContractFactory(
      name: "TSAggregator_V3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregator_V3__factory>;
    getContractFactory(
      name: "TSAggregator_V4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregator_V4__factory>;
    getContractFactory(
      name: "TSAggregator_V5",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregator_V5__factory>;
    getContractFactory(
      name: "TSMemoGen_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSMemoGen_V1__factory>;
    getContractFactory(
      name: "TSMemoGenLedger_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSMemoGenLedger_V1__factory>;
    getContractFactory(
      name: "TSPaymentGated",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSPaymentGated__factory>;
    getContractFactory(
      name: "SKChainflipHyperLiquid_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SKChainflipHyperLiquid_V1__factory>;
    getContractFactory(
      name: "TSAggregatorChainflip_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregatorChainflip_V1__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IROUTER",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IROUTER__factory>;
    getContractFactory(
      name: "ISWAPROUTER",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISWAPROUTER__factory>;
    getContractFactory(
      name: "ThorchainSimpleAggregatorV5",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThorchainSimpleAggregatorV5__factory>;
    getContractFactory(
      name: "TSAggregatorGeneric_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregatorGeneric_V1__factory>;
    getContractFactory(
      name: "TSAggregatorUniswapV2_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregatorUniswapV2_V1__factory>;
    getContractFactory(
      name: "TSAggregatorUniswapV3_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregatorUniswapV3_V1__factory>;
    getContractFactory(
      name: "TSAggregatorUniswapV3_V2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregatorUniswapV3_V2__factory>;
    getContractFactory(
      name: "IWoofi",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWoofi__factory>;
    getContractFactory(
      name: "TSAggregatorWoofi",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregatorWoofi__factory>;
    getContractFactory(
      name: "TSLendingLoop_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSLendingLoop_V1__factory>;
    getContractFactory(
      name: "TSAggregatorTokenTransferProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSAggregatorTokenTransferProxy__factory>;
    getContractFactory(
      name: "TSFeeDistributor_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSFeeDistributor_V1__factory>;
    getContractFactory(
      name: "TSFeeDistributor_V2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSFeeDistributor_V2__factory>;
    getContractFactory(
      name: "IRewardsReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsReceiver__factory>;
    getContractFactory(
      name: "TSFeeDistributor_V3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSFeeDistributor_V3__factory>;
    getContractFactory(
      name: "IRewardsReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsReceiver__factory>;
    getContractFactory(
      name: "TSFeeDistributor_V4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSFeeDistributor_V4__factory>;
    getContractFactory(
      name: "TSOracle_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSOracle_V1__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "TSSushiPoolDonator_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSSushiPoolDonator_V1__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockRewardsReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRewardsReceiver__factory>;
    getContractFactory(
      name: "MockThorchainRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockThorchainRouter__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IROUTER",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IROUTER__factory>;
    getContractFactory(
      name: "IRUNE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRUNE__factory>;
    getContractFactory(
      name: "THORChain_Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.THORChain_Router__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUSDC__factory>;
    getContractFactory(
      name: "ThorToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThorToken__factory>;
    getContractFactory(
      name: "UTHOR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UTHOR__factory>;
    getContractFactory(
      name: "VTHOR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VTHOR__factory>;
    getContractFactory(
      name: "YieldTHOR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldTHOR__factory>;
    getContractFactory(
      name: "YTHOR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YTHOR__factory>;
    getContractFactory(
      name: "TSSwapGeneric",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSSwapGeneric__factory>;
    getContractFactory(
      name: "TSWrapperLedger_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSWrapperLedger_V1__factory>;
    getContractFactory(
      name: "TSWrapperTCRouterV4_V1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TSWrapperTCRouterV4_V1__factory>;
    getContractFactory(
      name: "IChainflipReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainflipReceiver__factory>;
    getContractFactory(
      name: "IChainflipVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainflipVault__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626__factory>;
    getContractFactory(
      name: "IHyperLiquidBridge2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHyperLiquidBridge2__factory>;
    getContractFactory(
      name: "IOracleV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleV1__factory>;
    getContractFactory(
      name: "IThorchainRouterV4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IThorchainRouterV4__factory>;
    getContractFactory(
      name: "IUniswapRouterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapRouterV2__factory>;
    getContractFactory(
      name: "IUniswapRouterV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapRouterV3__factory>;
    getContractFactory(
      name: "IWETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH9__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Vote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Vote__factory>;
    getContractFactory(
      name: "Executors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Executors__factory>;
    getContractFactory(
      name: "Owners",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owners__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "EIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ShortStrings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "SKChainflipAggregator_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SKChainflipAggregator_V1>;
    getContractAt(
      name: "TSAggregator_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregator_V1>;
    getContractAt(
      name: "TSAggregator_V2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregator_V2>;
    getContractAt(
      name: "TSAggregator_V3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregator_V3>;
    getContractAt(
      name: "TSAggregator_V4",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregator_V4>;
    getContractAt(
      name: "TSAggregator_V5",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregator_V5>;
    getContractAt(
      name: "TSMemoGen_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSMemoGen_V1>;
    getContractAt(
      name: "TSMemoGenLedger_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSMemoGenLedger_V1>;
    getContractAt(
      name: "TSPaymentGated",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSPaymentGated>;
    getContractAt(
      name: "SKChainflipHyperLiquid_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SKChainflipHyperLiquid_V1>;
    getContractAt(
      name: "TSAggregatorChainflip_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregatorChainflip_V1>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IROUTER",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IROUTER>;
    getContractAt(
      name: "ISWAPROUTER",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISWAPROUTER>;
    getContractAt(
      name: "ThorchainSimpleAggregatorV5",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ThorchainSimpleAggregatorV5>;
    getContractAt(
      name: "TSAggregatorGeneric_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregatorGeneric_V1>;
    getContractAt(
      name: "TSAggregatorUniswapV2_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregatorUniswapV2_V1>;
    getContractAt(
      name: "TSAggregatorUniswapV3_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregatorUniswapV3_V1>;
    getContractAt(
      name: "TSAggregatorUniswapV3_V2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregatorUniswapV3_V2>;
    getContractAt(
      name: "IWoofi",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWoofi>;
    getContractAt(
      name: "TSAggregatorWoofi",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregatorWoofi>;
    getContractAt(
      name: "TSLendingLoop_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSLendingLoop_V1>;
    getContractAt(
      name: "TSAggregatorTokenTransferProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSAggregatorTokenTransferProxy>;
    getContractAt(
      name: "TSFeeDistributor_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSFeeDistributor_V1>;
    getContractAt(
      name: "TSFeeDistributor_V2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSFeeDistributor_V2>;
    getContractAt(
      name: "IRewardsReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardsReceiver>;
    getContractAt(
      name: "TSFeeDistributor_V3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSFeeDistributor_V3>;
    getContractAt(
      name: "IRewardsReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardsReceiver>;
    getContractAt(
      name: "TSFeeDistributor_V4",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSFeeDistributor_V4>;
    getContractAt(
      name: "TSOracle_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSOracle_V1>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "TSSushiPoolDonator_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSSushiPoolDonator_V1>;
    getContractAt(
      name: "MockERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockRewardsReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRewardsReceiver>;
    getContractAt(
      name: "MockThorchainRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockThorchainRouter>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IROUTER",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IROUTER>;
    getContractAt(
      name: "IRUNE",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRUNE>;
    getContractAt(
      name: "THORChain_Router",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.THORChain_Router>;
    getContractAt(
      name: "TestERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TestUSDC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUSDC>;
    getContractAt(
      name: "ThorToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ThorToken>;
    getContractAt(
      name: "UTHOR",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UTHOR>;
    getContractAt(
      name: "VTHOR",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VTHOR>;
    getContractAt(
      name: "YieldTHOR",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldTHOR>;
    getContractAt(
      name: "YTHOR",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.YTHOR>;
    getContractAt(
      name: "TSSwapGeneric",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSSwapGeneric>;
    getContractAt(
      name: "TSWrapperLedger_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSWrapperLedger_V1>;
    getContractAt(
      name: "TSWrapperTCRouterV4_V1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TSWrapperTCRouterV4_V1>;
    getContractAt(
      name: "IChainflipReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainflipReceiver>;
    getContractAt(
      name: "IChainflipVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainflipVault>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC4626",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4626>;
    getContractAt(
      name: "IHyperLiquidBridge2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHyperLiquidBridge2>;
    getContractAt(
      name: "IOracleV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleV1>;
    getContractAt(
      name: "IThorchainRouterV4",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IThorchainRouterV4>;
    getContractAt(
      name: "IUniswapRouterV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapRouterV2>;
    getContractAt(
      name: "IUniswapRouterV3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapRouterV3>;
    getContractAt(
      name: "IWETH9",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH9>;
    getContractAt(
      name: "ERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "ERC20Vote",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Vote>;
    getContractAt(
      name: "Executors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Executors>;
    getContractAt(
      name: "Owners",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Owners>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "SKChainflipAggregator_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SKChainflipAggregator_V1>;
    deployContract(
      name: "TSAggregator_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregator_V1>;
    deployContract(
      name: "TSAggregator_V2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregator_V2>;
    deployContract(
      name: "TSAggregator_V3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregator_V3>;
    deployContract(
      name: "TSAggregator_V4",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregator_V4>;
    deployContract(
      name: "TSAggregator_V5",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregator_V5>;
    deployContract(
      name: "TSMemoGen_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSMemoGen_V1>;
    deployContract(
      name: "TSMemoGenLedger_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSMemoGenLedger_V1>;
    deployContract(
      name: "TSPaymentGated",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSPaymentGated>;
    deployContract(
      name: "SKChainflipHyperLiquid_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SKChainflipHyperLiquid_V1>;
    deployContract(
      name: "TSAggregatorChainflip_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorChainflip_V1>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IROUTER",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IROUTER>;
    deployContract(
      name: "ISWAPROUTER",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISWAPROUTER>;
    deployContract(
      name: "ThorchainSimpleAggregatorV5",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ThorchainSimpleAggregatorV5>;
    deployContract(
      name: "TSAggregatorGeneric_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorGeneric_V1>;
    deployContract(
      name: "TSAggregatorUniswapV2_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorUniswapV2_V1>;
    deployContract(
      name: "TSAggregatorUniswapV3_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorUniswapV3_V1>;
    deployContract(
      name: "TSAggregatorUniswapV3_V2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorUniswapV3_V2>;
    deployContract(
      name: "IWoofi",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWoofi>;
    deployContract(
      name: "TSAggregatorWoofi",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorWoofi>;
    deployContract(
      name: "TSLendingLoop_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSLendingLoop_V1>;
    deployContract(
      name: "TSAggregatorTokenTransferProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorTokenTransferProxy>;
    deployContract(
      name: "TSFeeDistributor_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSFeeDistributor_V1>;
    deployContract(
      name: "TSFeeDistributor_V2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSFeeDistributor_V2>;
    deployContract(
      name: "IRewardsReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardsReceiver>;
    deployContract(
      name: "TSFeeDistributor_V3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSFeeDistributor_V3>;
    deployContract(
      name: "IRewardsReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardsReceiver>;
    deployContract(
      name: "TSFeeDistributor_V4",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSFeeDistributor_V4>;
    deployContract(
      name: "TSOracle_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSOracle_V1>;
    deployContract(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "TSSushiPoolDonator_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSSushiPoolDonator_V1>;
    deployContract(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockRewardsReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockRewardsReceiver>;
    deployContract(
      name: "MockThorchainRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockThorchainRouter>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IROUTER",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IROUTER>;
    deployContract(
      name: "IRUNE",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRUNE>;
    deployContract(
      name: "THORChain_Router",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.THORChain_Router>;
    deployContract(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestERC20>;
    deployContract(
      name: "TestUSDC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestUSDC>;
    deployContract(
      name: "ThorToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ThorToken>;
    deployContract(
      name: "UTHOR",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UTHOR>;
    deployContract(
      name: "VTHOR",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VTHOR>;
    deployContract(
      name: "YieldTHOR",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.YieldTHOR>;
    deployContract(
      name: "YTHOR",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.YTHOR>;
    deployContract(
      name: "TSSwapGeneric",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSSwapGeneric>;
    deployContract(
      name: "TSWrapperLedger_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSWrapperLedger_V1>;
    deployContract(
      name: "TSWrapperTCRouterV4_V1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSWrapperTCRouterV4_V1>;
    deployContract(
      name: "IChainflipReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainflipReceiver>;
    deployContract(
      name: "IChainflipVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainflipVault>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC4626>;
    deployContract(
      name: "IHyperLiquidBridge2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHyperLiquidBridge2>;
    deployContract(
      name: "IOracleV1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleV1>;
    deployContract(
      name: "IThorchainRouterV4",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IThorchainRouterV4>;
    deployContract(
      name: "IUniswapRouterV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapRouterV2>;
    deployContract(
      name: "IUniswapRouterV3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapRouterV3>;
    deployContract(
      name: "IWETH9",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH9>;
    deployContract(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "ERC20Vote",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Vote>;
    deployContract(
      name: "Executors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Executors>;
    deployContract(
      name: "Owners",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Owners>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "EIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "ShortStrings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "SKChainflipAggregator_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SKChainflipAggregator_V1>;
    deployContract(
      name: "TSAggregator_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregator_V1>;
    deployContract(
      name: "TSAggregator_V2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregator_V2>;
    deployContract(
      name: "TSAggregator_V3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregator_V3>;
    deployContract(
      name: "TSAggregator_V4",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregator_V4>;
    deployContract(
      name: "TSAggregator_V5",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregator_V5>;
    deployContract(
      name: "TSMemoGen_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSMemoGen_V1>;
    deployContract(
      name: "TSMemoGenLedger_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSMemoGenLedger_V1>;
    deployContract(
      name: "TSPaymentGated",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSPaymentGated>;
    deployContract(
      name: "SKChainflipHyperLiquid_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SKChainflipHyperLiquid_V1>;
    deployContract(
      name: "TSAggregatorChainflip_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorChainflip_V1>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IROUTER",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IROUTER>;
    deployContract(
      name: "ISWAPROUTER",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISWAPROUTER>;
    deployContract(
      name: "ThorchainSimpleAggregatorV5",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ThorchainSimpleAggregatorV5>;
    deployContract(
      name: "TSAggregatorGeneric_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorGeneric_V1>;
    deployContract(
      name: "TSAggregatorUniswapV2_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorUniswapV2_V1>;
    deployContract(
      name: "TSAggregatorUniswapV3_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorUniswapV3_V1>;
    deployContract(
      name: "TSAggregatorUniswapV3_V2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorUniswapV3_V2>;
    deployContract(
      name: "IWoofi",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWoofi>;
    deployContract(
      name: "TSAggregatorWoofi",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorWoofi>;
    deployContract(
      name: "TSLendingLoop_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSLendingLoop_V1>;
    deployContract(
      name: "TSAggregatorTokenTransferProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSAggregatorTokenTransferProxy>;
    deployContract(
      name: "TSFeeDistributor_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSFeeDistributor_V1>;
    deployContract(
      name: "TSFeeDistributor_V2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSFeeDistributor_V2>;
    deployContract(
      name: "IRewardsReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardsReceiver>;
    deployContract(
      name: "TSFeeDistributor_V3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSFeeDistributor_V3>;
    deployContract(
      name: "IRewardsReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardsReceiver>;
    deployContract(
      name: "TSFeeDistributor_V4",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSFeeDistributor_V4>;
    deployContract(
      name: "TSOracle_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSOracle_V1>;
    deployContract(
      name: "IUniswapV2Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "TSSushiPoolDonator_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSSushiPoolDonator_V1>;
    deployContract(
      name: "MockERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockRewardsReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockRewardsReceiver>;
    deployContract(
      name: "MockThorchainRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockThorchainRouter>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IROUTER",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IROUTER>;
    deployContract(
      name: "IRUNE",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRUNE>;
    deployContract(
      name: "THORChain_Router",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.THORChain_Router>;
    deployContract(
      name: "TestERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestERC20>;
    deployContract(
      name: "TestUSDC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestUSDC>;
    deployContract(
      name: "ThorToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ThorToken>;
    deployContract(
      name: "UTHOR",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UTHOR>;
    deployContract(
      name: "VTHOR",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VTHOR>;
    deployContract(
      name: "YieldTHOR",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.YieldTHOR>;
    deployContract(
      name: "YTHOR",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.YTHOR>;
    deployContract(
      name: "TSSwapGeneric",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSSwapGeneric>;
    deployContract(
      name: "TSWrapperLedger_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSWrapperLedger_V1>;
    deployContract(
      name: "TSWrapperTCRouterV4_V1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TSWrapperTCRouterV4_V1>;
    deployContract(
      name: "IChainflipReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainflipReceiver>;
    deployContract(
      name: "IChainflipVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainflipVault>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC4626",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC4626>;
    deployContract(
      name: "IHyperLiquidBridge2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHyperLiquidBridge2>;
    deployContract(
      name: "IOracleV1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleV1>;
    deployContract(
      name: "IThorchainRouterV4",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IThorchainRouterV4>;
    deployContract(
      name: "IUniswapRouterV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapRouterV2>;
    deployContract(
      name: "IUniswapRouterV3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapRouterV3>;
    deployContract(
      name: "IWETH9",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH9>;
    deployContract(
      name: "ERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "ERC20Vote",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Vote>;
    deployContract(
      name: "Executors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Executors>;
    deployContract(
      name: "Owners",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Owners>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
